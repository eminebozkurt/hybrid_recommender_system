# -*- coding: utf-8 -*-
"""Hybrid_Recommender_System.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11Zds773JTtFBLO320hmXZ0FScZP9foLs
"""

# User Based Recommendation
# Görev 1: Veri Hazırlama
# Adım1: movie,rating veri setlerini okutunuz.

import pandas as pd
movie_ = pd.read_csv('/content/sample_data/movie.csv')
rating_ = pd.read_csv('/content/sample_data/rating.csv')

movie = movie_.copy()
rating = rating_.copy()
movie.head()
rating.head()

# Adım 2: rating veri setine Id’lere ait film isimlerini ve türünü movie veri setinden ekleyiniz.

df = movie.merge(rating, how="left", on="movieId")
df.head()

# Adım 3: Toplam oy kullanılma sayısı 1000'in altında olan filmlerin isimlerini listede tutunuz ve veri setinden çıkartınız.

rate_counts = pd.DataFrame(df["title"].value_counts())
rare_movies = rate_counts[rate_counts["title"] <= 1000].index
common_movies = df[~df["title"].isin(rare_movies)]

# Adım 4: index'te userID'lerin sutunlarda film isimlerinin ve değer olarak ratinglerin bulunduğu dataframe için pivot table oluşturunuz.
user_movie_df = common_movies.pivot_table(index=["userId"], columns=["title"], values="rating")

user_movie_df.head()

pd.DataFrame(df["title"].value_counts())

# Adım 5: Yapılan tüm işlemleri fonksiyonlaştırınız.
def create_user_movie_df():
    import pandas as pd
    movie_ = pd.read_csv('/content/sample_data/movie.csv')
    rating_ = pd.read_csv('/content/sample_data/rating.csv')
    movie = movie_.copy()
    rating = rating_.head(1000000).copy()
    df = movie.merge(rating, how="left", on="movieId")
    rate_counts = pd.DataFrame(df["title"].value_counts())
    rare_movies = rate_counts[rate_counts["title"] <= 1000].index
    common_movies = df[~df["title"].isin(rare_movies)]
    user_movie_df = common_movies.pivot_table(index=["userId"], columns=["title"], values="rating")
    return user_movie_df

user_movie_df = create_user_movie_df()

user_movie_df.head()

# Görev 2: Öneri Yapılacak Kullanıcının İzlediği Filmlerin Belirlenmesi
# Adım1: Rastgele bir kullanıcı id’si seçiniz.
random_user = int(pd.Series(user_movie_df.index).sample(1, random_state=44).values)

random_user # 26403

# Adım 2: Seçilen kullanıcıya ait gözlem birimlerinden oluşan random_user_df adında yeni bir dataframe oluşturunuz.#
random_user_df = user_movie_df[user_movie_df.index == random_user]

random_user_df

# Adım 3: Seçilen kullanıcıların oy kullandığı filmleri movies_watched adında bir listeye atayınız
movies_watched = random_user_df.columns[random_user_df.notna().any()].tolist()

movies_watched

# Görev 3: Aynı Filmleri İzleyen Diğer Kullanıcıların Verisine ve Id'lerine Erişilmesi
# Adım 1: Seçilen kullanıcının izlediği fimlere ait sutunları user_movie_df'ten seçiniz ve movies_watched_df adında yeni bir dataframe oluşturunuz.
movies_watched_df = user_movie_df[movies_watched]
movies_watched_df

# Adım 2: Her bir kullanıcının seçili user'in izlediği filmlerin kaçını izlediğini bilgisini taşıyan user_movie_count adında yeni bir dataframe oluşturunuz.
user_movie_count = movies_watched_df.T.notnull().sum()
user_movie_count = user_movie_count.reset_index()
user_movie_count.columns = ["userId", "movie_count"]
user_movie_count.head()

# Adım 3: Seçilen kullanıcının oy verdiği filmlerin yüzde 60 ve üstünü izleyenlerin kullanıcı id’lerinden users_same_movies adında bir liste oluşturunuz.
perc = len(movies_watched) * 60 / 100 # 10.2
users_same_movies = user_movie_count[user_movie_count["movie_count"] > perc]["userId"]
users_same_movies.head()

user_movie_count[user_movie_count["movie_count"] > perc].sort_values("movie_count", ascending=False)

# Görev 4: Öneri Yapılacak Kullanıcı ile En Benzer Kullanıcıların Belirlenmesi
# Adım 1: user_same_movies listesi içerisindeki seçili user ile benzerlik gösteren kullanıcıların id’lerinin bulunacağı şekilde movies_watched_df dataframe’ini filtreleyiniz.
# Bunun için 3 adım gerçekleştireceğiz:
# 1. Sinan ve diğer kullanıcıların verilerini bir araya getireceğiz.
# 2. Korelasyon df'ini oluşturacağız.
# 3. En benzer bullanıcıları (Top Users) bulacağız 
final_df = pd.concat([movies_watched_df[movies_watched_df.index.isin(users_same_movies)],
                      random_user_df[movies_watched]])
final_df

# Adım 2: Kullanıcıların birbirleri ile olan korelasyonlarının bulunacağı yeni bir corr_df dataframe’i oluşturunuz.
corr_df = final_df.T.corr().unstack().sort_values().drop_duplicates()
corr_df = pd.DataFrame(corr_df, columns=["corr"])
corr_df.index.names = ['user_id_1', 'user_id_2']
corr_df = corr_df.reset_index()
corr_df.head()

"""Adım 3: Seçili kullanıcı ile yüksek korelasyona sahip (0.65’in üzerinde olan) kullanıcıları filtreleyerek top_users adında yeni bir dataframe oluşturunuz.

"""

# Adım 3: Seçili kullanıcı ile yüksek korelasyona sahip (0.65’in üzerinde olan) kullanıcıları filtreleyerek top_users adında yeni bir dataframe oluşturunuz.
top_users = corr_df[(corr_df["user_id_1"] == random_user) & (corr_df["corr"] >= 0.3)][
    ["user_id_2", "corr"]].reset_index(drop=True)
top_users = top_users.sort_values(by='corr', ascending=False)
top_users.rename(columns={"user_id_2": "userId"}, inplace=True)
top_users.head()

# Adım 4: top_users dataframe’ine rating veri seti ile merge ediniz.
rating = pd.read_csv('/content/sample_data/rating.csv')
top_users_ratings = top_users.merge(rating[["userId", "movieId", "rating"]], how='inner')
top_users_ratings = top_users_ratings[top_users_ratings["userId"] != random_user]
top_users_ratings

# Görev 5: Weighted Average Recommendation Score'un Hesaplanması ve İlk 5 Filmin Tutulması
# Adım1: Her bir kullanıcının corr ve rating değerlerinin çarpımından oluşan weighted_rating adında yeni bir değişken oluşturunuz.
top_users_ratings["weighted_rating"] = top_users_ratings["corr"] * top_users_ratings["rating"]
top_users_ratings.head()

# Adım 2: Film id’si ve her bir filme ait tüm kullanıcıların weighted rating’lerinin ortalama değerini içeren recommendation_df adında yeni bir dataframe oluşturunuz.
recommendation_df = top_users_ratings.groupby('movieId').agg({"weighted_rating": "mean"})
recommendation_df = recommendation_df.reset_index()
recommendation_df.head()

# Adım 3: recommendation_df içerisinde weighted rating'i 3.5'ten büyük olan filmleri seçiniz ve weighted rating’e göre sıralayınız.
movies_to_be_recommend = recommendation_df[recommendation_df["weighted_rating"] > 1].sort_values("weighted_rating", ascending=False)

movies_to_be_recommend

# Adım 4: movie veri setinden film isimlerini getiriniz ve tavsiye edilecek ilk 5 filmi seçiniz.
movie = pd.read_csv('/content/sample_data/movie.csv')
movies_to_be_recommend.merge(movie[["movieId", "title"]]).head()

# Item Based Recommendation
# Görev 1: Kullanıcının izlediği en son ve en yüksek puan verdiği filme göre item-based öneri yapınız.
# Adım1: movie, rating veri setlerini okutunuz.
movie_ = pd.read_csv('/content/sample_data/movie.csv')
rating_ = pd.read_csv('/content/sample_data/rating.csv')

movie = movie_.copy()
rating = rating_.copy()
movie.head()
rating.head()

df = rating.merge(movie, how="left", on="movieId")
df.head()

# Adım 2: Seçili kullanıcının 5 puan verdiği filmlerden puanı en güncel olan filmin id'sini alınız.
#movie_id = df[(df["userId"] == random_user) & (df["rating"] == 5)].sort_values("timestamp", ascending=False).head(1) # user_id=1808	movieId = 19
movie_id = rating[(rating["userId"] == random_user) & (rating["rating"] == 5.0)].sort_values(by="timestamp", ascending=False)["movieId"][0:1].values[0]
movie_id

# Adım 3: User based recommendation bölümünde oluşturulan user_movie_df dataframe’ini seçilen film id’sine göre filtreleyiniz.
user_movie_df[movie[movie["movieId"] == movie_id]].head(2)

movie[movie["movieId"] == movie_id]["title"]

movie[movie["movieId"] == movie_id]["title"].values[0]

movie_name = movie[movie["movieId"] == movie_id]["title"].values[0]

movie_name

movie_df = user_movie_df[[movie_name]]
movie_df.head()

movie_df = user_movie_df[movie[movie["movieId"] == movie_id]["title"].values[0]]

movie_df.head()

# Adım 4: Filtrelenen dataframe’i kullanarak seçili filmle diğer filmlerin korelasyonunu bulunuz ve sıralayınız.
user_movie_df.corrwith(movie_df).sort_values(ascending=False).head(10)

# Adım 5: Seçili film’in kendisi haricinde ilk 5 film’I öneri olarak veriniz.
def item_based_recommender(movie_name, user_movie_df):
    movie = user_movie_df[movie_name]
    return user_movie_df.corrwith(movie).sort_values(ascending=False).head(10)

movies_from_item_based = item_based_recommender(movie[movie["movieId"] == movie_id]["title"].values[0], user_movie_df)

movies_from_item_based[1:6].index